#include "std\lodNames.inc"
#include "std/paramFile.inc"
console=openStandardIO;

//example usage
//O2Script.exe -a O2Scripts\ReplaceHitPointLODfromTo_CmdLine.bio2s p:\test\name.p3d

//Library methods
//==================

sourceModel = this @ 0;
targetModel = this @ 1;
//sourceBasePath = this @ 1;
//targetModel = this @ 2;
//targetBasePath = this @ 3;

//_srcPathInfo = splitPath sourceModel;
//_trgPathInfo = splitPath targetModel;
//_dataPath = (_trgPathInfo select 0)+(_trgPathInfo select 1)+"data";
//_trgOff = [0,count targetBasePath] select (targetBasePath == (targetModel @ [0,count targetBasePath]));

_p3dSource = newLODObject;
_p3dTarget = newLODObject;

console<<"Loading P3D: "<<sourceModel<<eoln;

_result = _p3dSource loadP3D sourceModel;

if (!_result) then
{
	console<<"Unable to load p3d "<<sourceModel<<eoln;
	getLine console;
};
if (!_result) exitWith {};

console<<"Loading P3D: "<<targetModel<<eoln;

_result = _p3dTarget loadP3D targetModel;

if (!_result) then
{
	console<<"Unable to load p3d "<<targetModel<<eoln;
	getLine console;
};
if (!_result) exitWith {};

_LODsSource = getObjects _p3dSource;
_resolutionsSource = getResolutions _p3dSource;

//{
//	console<<"_object "<<str _x<<eoln;
//} forEach getObjects _p3dSource;

_sourceHPLOD = newLODObject;

_selections = [];
_points = [];

for "_i" from 0 to ((count _p3dSource) - 1) do
{
	private["_currentLOD","_currentResolution"];
	_currentLOD = _LODsSource @ _i;
	_currentResolution = _resolutionsSource @ _i;

	if (_currentResolution == LOD_HPOINTS) then
	{
		console<<"_currentResolution "<<str _currentResolution<<eoln;
		console<<"_currentLOD "<<str _currentLOD<<eoln;
		
//		_success =_p3dSource setResolution LOD_HPOINTS;
		_success =_p3dSource setActiveSpecial LOD_HPOINTS;
		_sourceHPLOD = getActiveObject _p3dSource;
		console<<"_sourceHPLOD "<<str _sourceHPLOD<<eoln;

//		{
//			_selection = _currentLOD loadSelection _x;
//			_pointsIndices = getSelectedPoints _selection;
//
//			_selections set [count _selections,_selection];
//			_points set [count _points,_pointsIndices];
//		} forEach (getSelections _currentLOD);
	};
};

_LODsTarget = getObjects _p3dTarget;
_resolutionsTarget = getResolutions _p3dTarget;

for "_i" from 0 to ((count _p3dTarget) - 1) do
{
	private["_currentLOD","_currentResolution"];
	_currentLOD = _LODsTarget @ _i;
	_currentResolution = _resolutionsTarget @ _i;

	if (_currentResolution == LOD_HPOINTS) then
	{
		console<<"_currentResolution "<<str _currentResolution<<eoln;
		console<<"_currentLOD "<<str _currentLOD<<eoln;

//		_success =_p3dTarget setResolution LOD_HPOINTS;
		_success =_p3dTarget setActiveSpecial LOD_HPOINTS;
		_targetHPLOD = getActiveObject _p3dTarget;
		console<<"_targetHPLOD "<<str _targetHPLOD<<eoln;
		_targetHPLOD := _sourceHPLOD;
		console<<"_targetHPLOD "<<str _targetHPLOD<<eoln;

//		{
//			_selection = _currentLOD loadSelection _x;
//
//			deleteSelected _selection;
//			deleteSelection _selection;
//		} forEach (getSelections _currentLOD);

//		{deleteSelected _x} forEach (getSelections _currentLOD);
	};
};

console << "Saving..."<<eoln;

//_result = false;
_result = save (_p3dTarget as targetModel);
if (!_result) then
{
	console<<"Unable to save p3d "<<targetModel<<eoln;
	getLine console;
};
if (!_result) exitWith {};